# Entrada: Recebe logs do MikroTik via porta UDP 514
input {
  udp {
    port => 514
    codec => "line"
    type => "mikrotik_firewall"
  }
}

# Filtro: Processa e enriquece os logs
filter {
  # Debug: Mostra a mensagem recebida
  mutate {
    add_field => { "debug_message" => "%{message}" }
  }

  # Extrai os campos do log de firewall do MikroTik
  grok {
    match => {
      "message" => "firewall,info %{DATA:action}: in:%{DATA:in_interface} out:%{DATA:out_interface}, connection-state:%{WORD:connection_state} src-mac %{NOTSPACE:src_mac}, proto %{WORD:protocol}, %{IP:src_ip}:%{INT:src_port}->%{IP:dst_ip}:%{INT:dst_port}, len %{INT:length}"
    }
  }

  # Grok alternativo refinado: captura campos extras opcionais
  grok {
    match => {
      "message" => "firewall,info %{DATA:action}:?%{GREEDYDATA}in:%{DATA:in_interface} out:%{DATA:out_interface},(?: packet-mark:%{DATA:packet_mark})?(?: connection-mark:%{DATA:connection_mark})?(?: connection-state:%{DATA:connection_state})? src-mac %{NOTSPACE:src_mac}, proto %{DATA:protocol}, %{IP:src_ip}:%{INT:src_port}->%{IP:dst_ip}:%{INT:dst_port},(?: NAT %{DATA:nat_info})?, len %{INT:length}"
    }
    tag_on_failure => []
  }

  # Converte o tipo de dados de alguns campos
  mutate {
    convert => {
      "src_port" => "integer"
      "dst_port" => "integer"
      "length" => "integer"
    }
  }

  # Remove campos auxiliares criados pelo grok alternativo
  mutate {
    remove_field => ["extra_fields", "extra_fields2", "extra_fields3"]
  }

  # Remove duplicidade de campos, mantendo apenas o primeiro valor dos principais
  ruby {
    code => '
      fields = ["action", "in_interface", "out_interface", "connection_state", "src_mac", "protocol", "src_ip", "src_port", "dst_ip", "dst_port", "length"]
      fields.each do |f|
        v = event.get(f)
        if v.is_a?(Array)
          event.set(f, v[0])
        end
      end
    '
  }

  # Remove a tag _grokparsefailure dos eventos parseados pelo grok alternativo (usando ruby para evitar erro de sintaxe)
  ruby {
    code => '
      if event.get("src_ip") && event.get("dst_ip") && event.get("src_port") && event.get("dst_port") && event.get("tags")&.include?("_grokparsefailure")
        event.set("tags", event.get("tags").reject { |t| t == "_grokparsefailure" })
      end
    '
  }
}

# Saída: Envia os dados processados para o Elasticsearch
output {
  # Saída de debug para ver os logs recebidos
  stdout { 
    codec => rubydebug 
  }
  
  # Saída para o Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "mikrotik-firewall-%{+YYYY.MM.dd}"
    action => "create"
    document_id => "%{+YYYYMMdd}-%{+HHmmss}-%{+SSS}"
  }
}